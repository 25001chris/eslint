/**
 * @author Toru Nagashima <https://github.com/mysticatea>
 */
"use strict";

const fs = require("fs");
const http = require("https");
const path = require("path");
const logger = console;

/**
 * Fetch a file then process every line.
 * @param {string} url The URL to fetch.
 * @param {Function} cb The callback function to process each line.
 * @returns {Promise<void>} The promise which will be fulfilled after done.
 */
function processEachLine(url, cb) {
    return new Promise((resolve, reject) => {
        http.get(url, res => {
            let buffer = "";

            res.setEncoding("utf8");
            res.on("data", chunk => {
                const lines = (buffer + chunk).split("\n");

                if (lines.length === 1) {
                    buffer = lines[0];
                } else {
                    buffer = lines.pop();
                    for (const line of lines) {
                        cb(line); // eslint-disable-line callback-return
                    }
                }
            });
            res.on("end", () => {
                if (buffer) {
                    cb(buffer); // eslint-disable-line callback-return
                }
                resolve();
            });
            res.on("error", reject);
        }).on("error", reject);
    });
}

/**
 * Convert a given character code list to a range list.
 * @param {number[]} chars The character code list.
 * @returns {([number, number])[]} The range list.
 */
function toRanges(chars) {
    if (chars.length === 0) {
        return [];
    }

    const ranges = [[chars[0], chars[0]]];

    for (let i = 1; i < chars.length; ++i) {
        const code = chars[i];
        const lastCode = chars[i - 1];

        if (code === lastCode + 1) {
            ranges[ranges.length - 1][1] = code;
        } else {
            ranges.push([code, code]);
        }
    }

    return ranges;
}

/**
 * Render the content of `lib/util/unicode/is-combining-character.js`.
 * @param {number[]} chars The character code list to render.
 * @returns {void}
 */
function renderIsCombiningCharacter(chars) {
    return `// THIS FILE WAS GENERATED BY 'tools/update-unicode-utils.js'
"use strict";

/**
 * Check whether a given character is a combining mark or not.
 * @param {number} c The character code to check.
 * @returns {boolean} \`true\` if the character belongs to the category, one of \`Mc\`, \`Me\`, and \`Mn\`.
 */
module.exports = function isCombiningCharacter(c) {
    return (
${
    toRanges(chars)
        .map(([min, max]) => ( // eslint-disable-line no-confusing-arrow
            min === max
                ? `        c === 0x${min.toString(16)}`
                : `        (c >= 0x${min.toString(16)} && c <= 0x${max.toString(16)})`
        ))
        .join(" ||\n")
}
    );
};
`;
}

//------------------------------------------------------------------------------
// Main
//------------------------------------------------------------------------------

const combiningChars = [];

processEachLine(
    "https://www.unicode.org/Public/UCD/latest/ucd/UnicodeData.txt",
    line => {
        const [code, name, category] = line.split(";");

        if (category === "Mc" || category === "Me" || category === "Mn") {
            logger.log(code, name);
            combiningChars.push(parseInt(code, 16));
        }
    }
).then(() => {
    fs.writeFileSync(
        path.resolve(__dirname, "../lib/util/unicode/is-combining-character.js"),
        renderIsCombiningCharacter(combiningChars)
    );
}).catch(error => {
    logger.error(error.stack);
    process.exitCode = 1;
});
